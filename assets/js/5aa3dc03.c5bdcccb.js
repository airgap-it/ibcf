"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[361],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,i(i({ref:t},c),{},{components:n})):r.createElement(g,i({ref:t},c))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},43857:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={title:"State Aggregator",slug:"/relay-contracts/tezos/state",hide_title:!0},i=void 0,s={unversionedId:"relay-contracts/tezos/state",id:"relay-contracts/tezos/state",title:"State Aggregator",description:"Implementations",source:"@site/docs/relay-contracts/tezos/state.mdx",sourceDirName:"relay-contracts/tezos",slug:"/relay-contracts/tezos/state",permalink:"/ibcf/relay-contracts/tezos/state",draft:!1,editUrl:"https://github.com/airgap-it/ibcf/tree/main/apps/documentation/docs/relay-contracts/tezos/state.mdx",tags:[],version:"current",frontMatter:{title:"State Aggregator",slug:"/relay-contracts/tezos/state",hide_title:!0},sidebar:"docs",previous:{title:"Overview",permalink:"/ibcf/trust-anchor"},next:{title:"EIP-1186 Proof Validator",permalink:"/ibcf/relay-contracts/tezos/validator"}},l={},p=[{value:"Implementations",id:"implementations",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>insert</code>",id:"insert",level:3},{value:"<code>configure</code>",id:"configure",level:3},{value:"<code>snapshot</code>",id:"snapshot",level:3},{value:"Views",id:"views",level:2},{value:"<code>get_proof</code>",id:"get_proof",level:3}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"implementations"},"Implementations"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Ligo: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/airgap-it/ibcf/blob/main/contracts/tezos/ligo/IBCF_Aggregator.mligo"},"IBCF_Aggregator.mligo")),(0,a.kt)("li",{parentName:"ul"},"Smartpy: ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/airgap-it/ibcf/blob/main/contracts/tezos/IBCF_Aggregator.py"},"IBCF_Aggregator.py"))),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"insert"},(0,a.kt)("inlineCode",{parentName:"h3"},"insert")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input type:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(pair %insert\n    (bytes %key)\n    (bytes %value)\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Contracts in a Tezos ecosystem can call this method to insert (",(0,a.kt)("em",{parentName:"p"},"key"),", ",(0,a.kt)("em",{parentName:"p"},"value"),") entries into a Merkle tree."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requires permissions?")," No, anyone is allowed to call this method."),(0,a.kt)("div",{class:"padding-vert--md"}),(0,a.kt)("h3",{id:"configure"},(0,a.kt)("inlineCode",{parentName:"h3"},"configure")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input type:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(list %configure\n    (or\n        (address %update_administrator)\n        (nat %update_max_state_size)\n        (nat %update_snapshot_duration)\n    )\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," This method modifies the contract configurations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requires permissions?")," Yes, only the multisig administrator can call this method."),(0,a.kt)("div",{class:"padding-vert--md"}),(0,a.kt)("h3",{id:"snapshot"},(0,a.kt)("inlineCode",{parentName:"h3"},"snapshot")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input type:")," ",(0,a.kt)("inlineCode",{parentName:"p"},"(unit %snapshot)")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," This method finalizes the current ongoing snapshot if the following condition is met: ",(0,a.kt)("inlineCode",{parentName:"p"},"current_level > snapshot_start_level + snapshot_duration"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Requires permissions?")," No, anyone is allowed to call this method."),(0,a.kt)("div",{class:"padding-vert--md"}),(0,a.kt)("h2",{id:"views"},"Views"),(0,a.kt)("h3",{id:"get_proof"},(0,a.kt)("inlineCode",{parentName:"h3"},"get_proof")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input type:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(pair\n    (bytes %key)\n    (address %owner)\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output type:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"(pair\n    (bytes %key)\n    (bytes %merkle_root)\n    (list %proof (or (bytes %Left) (bytes %Right)))\n    (nat %snapshot)\n    (bytes %value)\n)\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Description:")," Returns the Merkle-proof for a given data entry."))}u.isMDXComponent=!0}}]);